<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSON on tane.dev</title>
    <link>https://tane.dev/tags/json/</link>
    <description>Recent content in JSON on tane.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <managingEditor>spam@tane.dev (Tane Piper)</managingEditor>
    <webMaster>spam@tane.dev (Tane Piper)</webMaster>
    <copyright>This work is copyright Tane Piper</copyright>
    <lastBuildDate>Wed, 18 Sep 2019 11:00:00 +0100</lastBuildDate>
    
        <atom:link href="https://tane.dev/tags/json/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Webserial.app - An Svelte application for communicating with Serial Devices</title>
      <link>https://tane.dev/2021/02/webserial.app-an-svelte-application-for-communicating-with-serial-devices/</link>
      <pubDate>Fri, 05 Feb 2021 21:00:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2021/02/webserial.app-an-svelte-application-for-communicating-with-serial-devices/</guid>
      <description>After my previous experiments with the Web Serial API, I started experimenting with Svelte .
Within a couple of days I have created https://webserial.app/ - the Web Serial Controller app.
The interface might seem familiar - it&amp;rsquo;s based on XP.css - a Windows XP CSS theme. It was inspired by some of the Serial hardware software used in the 00&amp;rsquo;s.
The application is fully open source and features:
 Fully connected state - use the screens or keyboard shortcuts to connect and disconnect from devices with shared state Filter devices by vendor ID with a fully searchable list of all hardware vendors A draggable interface XP-like interface Options storage in localStorage Send text messages to any connected device  </description>
    </item>
    
    <item>
      <title>Web Serial API with RxJS - Two-Way Reactive Communication between Browser and Serial Hardware</title>
      <link>https://tane.dev/2021/01/web-serial-api-with-rxjs-two-way-reactive-communication-between-browser-and-serial-hardware/</link>
      <pubDate>Sat, 30 Jan 2021 12:00:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2021/01/web-serial-api-with-rxjs-two-way-reactive-communication-between-browser-and-serial-hardware/</guid>
      <description>Demo Link  Demo Source   Version 89 of Chrome and Edge browsers have released the Web Serial API unflagged which means as user it&amp;rsquo;s now available for general use rather than being locked behind experimental flags (if you&amp;rsquo;re on an earlier version you can enable Experimental Web Platform features in chrome://flags)
The API allows for communication between the browser and supported serial hardware such as Arduino or RaspberryPi over USB Serial connection - the device registers as available to the browser and a port can be opened.</description>
    </item>
    
    <item>
      <title>Create your own Dark Mode Detection Observable using RxJS and Media Queries</title>
      <link>https://tane.dev/2021/01/create-your-own-dark-mode-detection-observable-using-rxjs-and-media-queries/</link>
      <pubDate>Wed, 27 Jan 2021 21:00:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2021/01/create-your-own-dark-mode-detection-observable-using-rxjs-and-media-queries/</guid>
      <description>Demo Link One of the more recent features available in browsers is ability to do CSS Media Queries based on user theme &amp;amp; accessibility settings in the operating system - for example using @media (prefers-color-scheme: dark) (see prefers-color-scheme ) you can check if the users OS theme is currently in Dark Mode and use this to set a websites theme accordingly.
The query is also available in JavaScript using the window.</description>
    </item>
    
    <item>
      <title>Creating Custom RxJS Operators</title>
      <link>https://tane.dev/2021/01/creating-custom-rxjs-operators/</link>
      <pubDate>Mon, 25 Jan 2021 00:15:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2021/01/creating-custom-rxjs-operators/</guid>
      <description>RxJS is a popular library available for TypeScript and JavaScript.
It provides APIs for the creation of applications and libraries using asynchronous streams of data and reactive methods. It&amp;rsquo;s one of the foundation libraries of Angular .
Included in it are over 100 operators - functions that take an Observable stream of data and return values for use in chains of operators.
Many of the operators are low level, and combining them through the pipe method they create a powerful way to work with data.</description>
    </item>
    
    <item>
      <title>RxJS Ninja Updates - New operators for math and working with streams</title>
      <link>https://tane.dev/2021/01/rxjs-ninja-updates-new-operators-for-math-and-working-with-streams/</link>
      <pubDate>Thu, 14 Jan 2021 00:15:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2021/01/rxjs-ninja-updates-new-operators-for-math-and-working-with-streams/</guid>
      <description>Since the last update on RxJS Ninja there have been a few new operators added, below are some details and links to StackBlitz demos showing them in action.
Numbers and Math operators In @rxjs-ninja/rxjs-number the missing toFixed operator has been added, alongside a new custom toHex operator and the corresponding parseHex one allowing hex numbers to be worked with ( such as converting colours)
There are also new operators for some basic math - add , sub , div , mul , mod and pow all allowing you to modify source numbers, all accept a number, or an Observable number source.</description>
    </item>
    
  </channel>
</rss>
