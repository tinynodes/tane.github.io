<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on tane.dev</title>
    <link>https://tane.dev/tags/github/</link>
    <description>Recent content in Github on tane.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <managingEditor>spam@tane.dev (Tane Piper)</managingEditor>
    <webMaster>spam@tane.dev (Tane Piper)</webMaster>
    <copyright>This work is copyright Tane Piper</copyright>
    <lastBuildDate>Thu, 07 May 2020 20:30:00 +0100</lastBuildDate>
    
        <atom:link href="https://tane.dev/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>RxJS Ninja Updates - New operators for math and working with streams</title>
      <link>https://tane.dev/2021/01/rxjs-ninja-updates-new-operators-for-math-and-working-with-streams/</link>
      <pubDate>Thu, 14 Jan 2021 00:15:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2021/01/rxjs-ninja-updates-new-operators-for-math-and-working-with-streams/</guid>
      <description>Since the last update on RxJS Ninja there have been a few new operators added, below are some details and links to StackBlitz demos showing them in action.
Numbers and Math operators In @rxjs-ninja/rxjs-number the missing toFixed operator has been added, alongside a new custom toHex operator and the corresponding parseHex one allowing hex numbers to be worked with ( such as converting colours)
There are also new operators for some basic math - add , sub , div , mul , mod and pow all allowing you to modify source numbers, all accept a number, or an Observable number source.</description>
    </item>
    
    <item>
      <title>RxJS Primitives is now RxJS Ninja</title>
      <link>https://tane.dev/2020/11/rxjs-primitives-is-now-rxjs-ninja/</link>
      <pubDate>Mon, 23 Nov 2020 00:01:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2020/11/rxjs-primitives-is-now-rxjs-ninja/</guid>
      <description>Today I&amp;rsquo;ve re-released RxJS Primitives as RxJS Ninja . The new libraries have been published as the same last versions under their old name, so it&amp;rsquo;s easy to migrate to the new version - all now published under @rxjs-ninja instead of @tinynodes (a deprecation notice has also been left the old packages).</description>
    </item>
    
    <item>
      <title>New RxJS Primitives release, new operators &#43; Typescript 4</title>
      <link>https://tane.dev/2020/11/new-rxjs-primitives-release-new-operators-typescript-4/</link>
      <pubDate>Wed, 18 Nov 2020 11:30:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2020/11/new-rxjs-primitives-release-new-operators-typescript-4/</guid>
      <description>This week I released new versions of my RxJS libraries in rxjs-primitives . Since it&amp;rsquo;s released I&amp;rsquo;ve added a few new utility operators. Some of these have been out for a while since I originally wrote about the release, so I&amp;rsquo;ve highlighted them here as they may be useful to some developers.
You can check out the full docs here .
Typescript 4 Upgrading to Typescript 4 has allowed the removal of polymorphic functions in place of Vardic Tuple Types and is why there is a major bump on all packages.</description>
    </item>
    
    <item>
      <title>Polymorphic TypeScript - Function overloading with rest parameters</title>
      <link>https://tane.dev/2020/05/polymorphic-typescript-function-overloading-with-rest-parameters/</link>
      <pubDate>Tue, 12 May 2020 08:30:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2020/05/polymorphic-typescript-function-overloading-with-rest-parameters/</guid>
      <description>Recently in RxJS Primitives I encountered a situation where one of the methods - concat was initially designed to take an argument list of strings and in the method used rest (...args) parameters, mimicking the signature and passing them to the String.prototype.concat  I&amp;rsquo;ve created a StackBlitz Project with the code for each step that can be followed along.
 I wanted to refactor it to support an array of strings, but found that in the current implementation this is not possible and throws a TypeScript error:</description>
    </item>
    
    <item>
      <title>Publishing NPM Libraries using NX and Github Actions</title>
      <link>https://tane.dev/2020/05/publishing-npm-libraries-using-nx-and-github-actions/</link>
      <pubDate>Thu, 07 May 2020 20:30:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2020/05/publishing-npm-libraries-using-nx-and-github-actions/</guid>
      <description>This week I released version 1.0 of RxJS Primitives to NPM - but the journey to get there was not as easy as I hoped.
In the past I&amp;rsquo;ve used CircleCI and at work I use Jenkins but with this project I wanted to try out Github Actions .
After some trial an error (and many failed builds) I managed to get the workflow working, I&amp;rsquo;ve decided to share here the steps taken to hopefully save you from the same pain.</description>
    </item>
    
  </channel>
</rss>
