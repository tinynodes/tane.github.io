<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Polymorphism on tane.dev</title>
    <link>https://tane.dev/tags/polymorphism/</link>
    <description>Recent content in Polymorphism on tane.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <managingEditor>spam@tane.dev (Tane Piper)</managingEditor>
    <webMaster>spam@tane.dev (Tane Piper)</webMaster>
    <copyright>This work is copyright Tane Piper</copyright>
    <lastBuildDate>Tue, 12 May 2020 08:30:00 +0100</lastBuildDate>
    
        <atom:link href="https://tane.dev/tags/polymorphism/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>New RxJS Primitives release, new operators &#43; Typescript 4</title>
      <link>https://tane.dev/2020/11/new-rxjs-primitives-release-new-operators-typescript-4/</link>
      <pubDate>Wed, 18 Nov 2020 11:30:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2020/11/new-rxjs-primitives-release-new-operators-typescript-4/</guid>
      <description>This week I released new versions of my RxJS libraries in rxjs-primitives . Since it&amp;rsquo;s released I&amp;rsquo;ve added a few new utility operators. Some of these have been out for a while since I originally wrote about the release, so I&amp;rsquo;ve highlighted them here as they may be useful to some developers.
You can check out the full docs here .
Typescript 4 Upgrading to Typescript 4 has allowed the removal of polymorphic functions in place of Vardic Tuple Types and is why there is a major bump on all packages.</description>
    </item>
    
    <item>
      <title>Polymorphic TypeScript - Function overloading with rest parameters</title>
      <link>https://tane.dev/2020/05/polymorphic-typescript-function-overloading-with-rest-parameters/</link>
      <pubDate>Tue, 12 May 2020 08:30:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2020/05/polymorphic-typescript-function-overloading-with-rest-parameters/</guid>
      <description>Recently in RxJS Primitives I encountered a situation where one of the methods - concat was initially designed to take an argument list of strings and in the method used rest (...args) parameters, mimicking the signature and passing them to the String.prototype.concat  I&amp;rsquo;ve created a StackBlitz Project with the code for each step that can be followed along.
 I wanted to refactor it to support an array of strings, but found that in the current implementation this is not possible and throws a TypeScript error:</description>
    </item>
    
    <item>
      <title>Publishing NPM Libraries using NX and Github Actions</title>
      <link>https://tane.dev/2020/05/publishing-npm-libraries-using-nx-and-github-actions/</link>
      <pubDate>Thu, 07 May 2020 20:30:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2020/05/publishing-npm-libraries-using-nx-and-github-actions/</guid>
      <description>This week I released version 1.0 of RxJS Primitives to NPM - but the journey to get there was not as easy as I hoped.
In the past I&amp;rsquo;ve used CircleCI and at work I use Jenkins but with this project I wanted to try out Github Actions .
After some trial an error (and many failed builds) I managed to get the workflow working, I&amp;rsquo;ve decided to share here the steps taken to hopefully save you from the same pain.</description>
    </item>
    
    <item>
      <title>RxJS Primitives - Operators for mutating and filtering primitives</title>
      <link>https://tane.dev/2020/04/rxjs-primitives-operators-for-mutating-and-filtering-primitives/</link>
      <pubDate>Thu, 23 Apr 2020 11:30:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2020/04/rxjs-primitives-operators-for-mutating-and-filtering-primitives/</guid>
      <description>Today I&amp;rsquo;ve published a new set of libraries to NPM - RxJS Primitives .
These are based on some operators I&amp;rsquo;ve collected over the last year, and some additional ones I&amp;rsquo;ve started adding. Most are based around ECMASCript objects such as String, Number and Boolean but also includes some useful utility operators.
Over the coming weeks I&amp;rsquo;ll add more operators, both based on ECMAScript methods and custom functions that I have found useful.</description>
    </item>
    
    <item>
      <title>Validating data with JSON Schema, Angular and TypeScript</title>
      <link>https://tane.dev/2019/09/validating-data-with-json-schema-angular-and-typescript/</link>
      <pubDate>Wed, 18 Sep 2019 11:00:00 +0100</pubDate>
      <author>spam@tane.dev (Tane Piper)</author>
      <guid>https://tane.dev/2019/09/validating-data-with-json-schema-angular-and-typescript/</guid>
      <description>One common question I see with a lot of new TypeScript developers is how to handle runtime validation of data, using the types they have built.
The issue is web platform, as yet, does not support types. Typescript itself is a higher-level language built on top of JavaScript and uses a compiler to create compatible code for the web, node or other JS platforms - this means that types are only available at design time.</description>
    </item>
    
  </channel>
</rss>
